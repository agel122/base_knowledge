https://pgexercises.com/
select all from the required table:
		SELECT * FROM cd.facilities;
		
select certain items from required table:
		SELECT name, membercost FROM cd.facilities;
		
select certain items from required table with conditions:
		SELECT * FROM cd.facilities WHERE membercost > 0;

select certain items from required table with several conditions:
		SELECT facid, name, membercost, monthlymaintenance FROM cd.facilities 
		WHERE 
		membercost > 0 AND
		(membercost < monthlymaintenance/50.0); 

select certain items from required table with exact 'string' in name:
		SELECT * FROM cd.facilities WHERE name LIKE '%Tennis%';

select certain items from required table with exact id but don't use OR:
		SELECT * FROM cd.facilities WHERE facid IN (1,5);

select certain items from required table and add one more category in selection with conditions:
		SELECT name, monthlymaintenance,
			CASE 	WHEN monthlymaintenance<100 THEN 'cheap'
					WHEN monthlymaintenance>100 THEN 'expensive'
					END AS cost
			FROM cd.facilities;

select certain items from required table where one item has if condition with date:
		SELECT memid, surname, firstname, joindate FROM cd.members WHERE joindate >= '2012-09-01';

select first 10 unique certain items from required table :
		SELECT distinct surname FROM cd.members ORDER BY surname LIMIT 10;

UNION selections:
		SELECT surname FROM cd.members UNION SELECT name FROM cd.facilities;

Simple aggregation:
		SELECT max(joindate) AS latest FROM cd.members;

Aggregation in WHERE part of request:
		SELECT firstname, surname, joindate FROM cd.members WHERE joindate = (SELECT max(joindate) FROM cd.members); 

Select items from table 1 if items from related table 2 satisfy conditions (JOIN requests):
		SELECT s.starttime FROM cd.bookings AS s 
		JOIN cd.members AS a ON a.memid = s.memid 
		WHERE a.firstname = 'David' AND a.surname = 'Farrell';

Another example of JOIN request:
		SELECT bookings.starttime AS start, facilities.name AS name
		FROM cd.bookings AS bookings
		JOIN cd.facilities AS facilities
		ON facilities.facid = bookings.facid
		WHERE bookings.starttime >= '2012-09-21' AND bookings.starttime < '2012-09-22'
		AND facilities.name in ('Tennis Court 2', 'Tennis Court 1')
		ORDER BY bookings.starttime;

Joining two copies of one table (cd.members) to find OK condition for memid = recommendedby:
		SELECT distinct members1.surname AS surname, members1.firstname AS name
		FROM cd.members AS members1
		JOIN cd.members AS members2
		ON members1.memid = members2.recommendedby
		ORDER BY surname, name;

Select all items from first table (left outer join feature) and add "recommended" items from second table (if any):
		select mems.firstname as memfname, mems.surname as memsname, recs.firstname as recfname, recs.surname as recsname
			from 
				cd.members mems
				left outer join cd.members recs
					on recs.memid = mems.recommendedby
		order by memsname, memfname;

How can you produce a list of all members who have used a tennis court? Include in your output the name of the court, 
and the name of the member formatted as a single column. Ensure no duplicate data, 
and order by the member name followed by the facility name.
		select distinct mems.firstname || ' ' || mems.surname as member, facs.name as facility
			from 
				cd.members mems
				inner join cd.bookings bks
					on mems.memid = bks.memid
				inner join cd.facilities facs
					on bks.facid = facs.facid
			where
				facs.name in ('Tennis Court 2','Tennis Court 1')
		order by member, facility

How can you produce a list of bookings on the day of 2012-09-14 which will cost the member (or guest) more than $30? 
Remember that guests have different costs to members (the listed costs are per half-hour 'slot'), 
and the guest user is always ID 0. Include in your output the name of the facility, 
the name of the member formatted as a single column, and the cost. Order by descending cost, and do not use any subqueries.
		select mems.firstname || ' ' || mems.surname as member, 
			facs.name as facility, 
			case 
				when mems.memid = 0 then
					bks.slots*facs.guestcost
				else
					bks.slots*facs.membercost
			end as cost
				from
						cd.members mems                
						inner join cd.bookings bks
								on mems.memid = bks.memid
						inner join cd.facilities facs
								on bks.facid = facs.facid
				where
						bks.starttime >= '2012-09-14' and 
						bks.starttime < '2012-09-15' and (
							(mems.memid = 0 and bks.slots*facs.guestcost > 30) or
							(mems.memid != 0 and bks.slots*facs.membercost > 30)
						)
		order by cost desc;

How can you output a list of all members, including the individual who recommended them (if any), 
without using any joins? Ensure that there are no duplicates in the list, 
and that each firstname + surname pairing is formatted as a column and ordered.	
		select distinct mems.firstname || ' ' ||  mems.surname as member,
			(select recs.firstname || ' ' || recs.surname as recommender 
				from cd.members recs 
				where recs.memid = mems.recommendedby
			)
			from 
				cd.members mems
		order by member;

The club is adding a new facility - a spa. We need to add it into the facilities table. Use the following values:
facid: 9, Name: 'Spa', membercost: 20, guestcost: 30, initialoutlay: 100000, monthlymaintenance: 800.
		insert into cd.facilities
			(facid, name, membercost, guestcost, initialoutlay, monthlymaintenance)
			values (9, 'Spa', 20, 30, 100000, 800),
				   (10, 'Squash Court 2', 3.5, 17.5, 5000, 80);
Insert calculated data:
		insert into cd.facilities
			(facid, name, membercost, guestcost, initialoutlay, monthlymaintenance)
			select (select max(facid) from cd.facilities)+1, 'Spa', 20, 30, 100000, 800;

Update value of item:
		UPDATE cd.facilities
		SET initialoutlay = 10000
		WHERE name = 'Tennis Court 2';


We want to alter the price of the second tennis court so that it costs 10% more than the first one. 
Try to do this without using constant values for the prices, so that we can reuse the statement if we want to.
		UPDATE cd.facilities fac
		SET 
			membercost = (SELECT membercost*1.1 FROM cd.facilities WHERE facid=0),
			guestcost = (SELECT guestcost*1.1 FROM cd.facilities WHERE facid=0)
		WHERE fac.facid = 1;

Delete all items:
		DELETE FROM cd.bookings
Delete one item by id:		
		DELETE FROM cd.members WHERE memid = 37;
Delete items with conditions (subquery):
		delete from cd.members where memid not in (select memid from cd.bookings);  

Count number of items in table:
		select count(*) from cd.facilities; 

Count number of items with condition:
		select count(*) from cd.facilities where guestcost>=10;

Produce a count of the number of recommendations each member has made. Order by member ID.
		select recommendedby, count(*)
			from cd.members
			where recommendedby is not null
			group by recommendedby
		order by recommendedby;

Produce a list of the total number of slots booked per facility. 
For now, just produce an output table consisting of facility id and slots, sorted by facility id.
		SELECT facid, sum(slots) as "Total Slots"
			FROM cd.bookings
			GROUP BY facid
		ORDER BY facid

Produce a list of the total number of slots booked per facility in the month of September 2012. 
Produce an output table consisting of facility id and slots, sorted by the number of slots.
		SELECT facid, sum(slots) AS "Total Slots"
		FROM cd.bookings 
		WHERE starttime >= '2012-09-01' AND starttime < '2012-10-01'
		GROUP BY facid
		ORDER BY sum(slots);

Produce a list of the total number of slots booked per facility per month in the year of 2012. 
Produce an output table consisting of facility id and slots, sorted by the id and month.
		select facid, extract(month from starttime) as month, sum(slots) as "Total Slots"
			from cd.bookings
			where
				starttime >= '2012-01-01'
				and starttime < '2013-01-01'
			group by facid, month
		order by facid, month;

Find the total number of members (including guests) who have made at least one booking.
		SELECT count(distinct memid) from cd.bookings;

Produce a list of facilities with more than 1000 slots booked. 
Produce an output table consisting of facility id and slots, sorted by facility id.
		SELECT facid, sum(slots) as "Total Slots"
		FROM cd.bookings
		GROUP BY facid
		HAVING sum(slots) > 1000
		ORDER BY facid;

Produce a list of facilities along with their total revenue. 
The output table should consist of facility name and revenue, sorted by revenue. 
Remember that there's a different cost for guests and members!
		select facs.name, sum(slots * case
					when memid = 0 then facs.guestcost
					else facs.membercost
				end) as revenue
			from cd.bookings bks
			inner join cd.facilities facs
				on bks.facid = facs.facid
			group by facs.name
		order by revenue;   

Produce a list of facilities with a total revenue less than 1000. 
Produce an output table consisting of facility name and revenue, sorted by revenue. 
Remember that there's a different cost for guests and members!
		select name, revenue from (
			select facs.name, sum(case 
						when memid = 0 then slots * facs.guestcost
						else slots * membercost
					end) as revenue
				from cd.bookings bks
				inner join cd.facilities facs
					on bks.facid = facs.facid
				group by facs.name
			) as agg where revenue < 1000
		order by revenue;  
		